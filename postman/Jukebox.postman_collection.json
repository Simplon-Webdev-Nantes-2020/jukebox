{
	"info": {
		"_postman_id": "84e1dca9-32ef-4556-8721-585bf0f8530b",
		"name": "Jukebox",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"item": [
				{
					"name": "signin manu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response json should contain two tokens\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('token');\r",
									"    pm.expect(pm.response.json()).to.have.property('refreshToken');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "manu",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "_csrf",
									"value": "{{csrf_value}}",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{localhost}}/signin",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "quit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{jwt_refresh_token}}"
						},
						"url": {
							"raw": "{{localhost}}/quit",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"quit"
							]
						}
					},
					"response": []
				},
				{
					"name": "signin toto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response json should contain two tokens\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('token');\r",
									"    pm.expect(pm.response.json()).to.have.property('refreshToken');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "toto",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "_csrf",
									"value": "{{csrf_value}}",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{localhost}}/signin",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response json should contain two tokens\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('token');\r",
									"    pm.expect(pm.response.json()).to.have.property('refreshToken');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{jwt_refresh_token}}"
						},
						"url": {
							"raw": "{{localhost}}/refresh",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response json should contain two tokens\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('token');\r",
									"    pm.expect(pm.response.json()).to.have.property('refreshToken');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"macaron\",\n    \"email\": \"macaron@jukebox.com\",\n    \"password\": \"Pres1d3n!\"\n}"
						},
						"url": {
							"raw": "{{localhost}}/signup",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "signin admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response json should contain two tokens\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('token');\r",
									"    pm.expect(pm.response.json()).to.have.property('refreshToken');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "_csrf",
									"value": "{{csrf_value}}",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{localhost}}/signin",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jwtTokens = JSON.parse(responseBody);",
							"pm.environment.set(\"jwt_token\", jwtTokens.token);",
							"pm.environment.set(\"jwt_refresh_token\", jwtTokens.refreshToken);"
						]
					}
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "all roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_url}}/roles",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_url}}/users",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "name",
									"value": "man",
									"disabled": true
								},
								{
									"key": "email",
									"value": "admin@juk",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"response json should contain one collection\", function () {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData).to.have.property('createdDate');\r",
									"    pm.expect(jsonData).to.have.property('active');\r",
									"    pm.expect(jsonData).to.have.property('authorities');\r",
									"});\r",
									"\r",
									"pm.test(\"test id\", function () {\r",
									"    pm.expect(jsonData.id).greaterThan(0);\r",
									"});\r",
									"\r",
									"if (pm.environment.get(\"user_id\") == 1) {\r",
									"    pm.test(\"test values\", function () {\r",
									"        pm.expect(jsonData.id).eql(1);\r",
									"        pm.expect(jsonData.username).eql('admin');\r",
									"        pm.expect(jsonData.createdDate).not.eql(null);\r",
									"        pm.expect(jsonData.active).eql(true);\r",
									"        pm.expect(jsonData.authorities);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"test roles\", function () {\r",
									"        //nb roles\r",
									"        pm.expect(Object.keys(jsonData.authorities).length).to.eql(3);\r",
									"        // 2 attributes\r",
									"        pm.expect(jsonData.authorities[0]).to.have.keys('id','authority').and.be.an(\"object\");  \r",
									"        // authority contains ROLE_\r",
									"        _.each(jsonData.authorities, (item) => {\r",
									"            pm.expect(item.authority).to.include('ROLE_')\r",
									"        });\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_url}}/users/{{artist_id}}",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"users",
								"{{artist_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"jsonData = pm.response.json();\r",
									"pm.environment.set(\"new_user_id\", jsonData.id);\r",
									"\r",
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response json should contain new user\", function () {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData).to.have.property('createdDate');\r",
									"    pm.expect(jsonData).to.have.property('active');\r",
									"    pm.expect(jsonData).to.have.property('authorities');\r",
									"});\r",
									"\r",
									"pm.test(\"test values\", function () {\r",
									"        pm.expect(jsonData.id,\"id\").greaterThan(0);\r",
									"        pm.expect(jsonData.username,\"username\").eql('bigboss');\r",
									"        pm.expect(jsonData.createdDate,\"createdDate\").not.eql(null);\r",
									"        pm.expect(jsonData.active,\"active\").eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"test roles\", function () {\r",
									"    //nb roles\r",
									"    pm.expect(Object.keys(jsonData.authorities).length,\"one authority\").to.eql(1);\r",
									"    // 2 attributes\r",
									"    pm.expect(jsonData.authorities[0],\"authority with 2 attributes\").to.have.keys('id','authority').and.be.an(\"object\");  \r",
									"    // authority contains ROLE_MANAGER\r",
									"    pm.expect(jsonData.authorities[0].authority,\"ROLE_MANAGER\").eql(\"ROLE_MANAGER\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"bigboss\",\n    \"email\": \"bigboss@jukebox.com\",\n    \"password\": \"9b1gBoss#\",\n    \"authorities\": [\n         {\n            \"id\": 2,\n            \"authority\": \"ROLE_MANAGER\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{admin_url}}/users",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"oldPassword\": \"9b1gBoss#\",\n    \"newPassword\": \"85frMO8G#824\",\n    \"forcePwdChange\": false\n}"
						},
						"url": {
							"raw": "{{admin_url}}/users/{{new_user_id}}/password",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"users",
								"{{new_user_id}}",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response json should contain new user\", function () {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData).to.have.property('createdDate');\r",
									"    pm.expect(jsonData).to.have.property('active');\r",
									"    pm.expect(jsonData).to.have.property('authorities');\r",
									"});\r",
									"\r",
									"pm.test(\"test values\", function () {\r",
									"        pm.expect(jsonData.username,\"username\").eql('bigboss');\r",
									"        pm.expect(jsonData.createdDate,\"createdDate\").not.eql(null);\r",
									"        pm.expect(jsonData.active,\"active\").eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"test roles\", function () {\r",
									"    //nb roles\r",
									"    pm.expect(Object.keys(jsonData.authorities).length,\"two authority\").to.eql(2);\r",
									"    // 2 attributes\r",
									"    pm.expect(jsonData.authorities[0],\"authority with 2 attributes\").to.have.keys('id','authority').and.be.an(\"object\");  \r",
									"    // authorities contains ROLE_USER, ROLE_MANAGER\r",
									"    role_user = \"\";\r",
									"    role_manager = \"\";\r",
									"    _.each(jsonData.authorities, (item) => {\r",
									"            if (item.authority === \"ROLE_USER\") {\r",
									"                role_user = item.authority;\r",
									"            }\r",
									"            if (item.authority === \"ROLE_MANAGER\") {\r",
									"                role_manager = item.authority;\r",
									"            }\r",
									"        });\r",
									"    pm.expect(role_user,\"ROLE_USER\").eql('ROLE_USER')\r",
									"    pm.expect(role_manager,\"ROLE_MANAGER\").eql('ROLE_MANAGER')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{new_user_id}},\n    \"username\": \"bigboss\",\n    \"email\": \"bigboss@jukebox.fr\",\n    \"active\": true,\n    \"authorities\": [\n        {\n            \"id\": 2,\n            \"authority\": \"ROLE_MANAGER\"\n        },\n        {\n            \"id\": 3,\n            \"authority\": \"ROLE_USER\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{admin_url}}/users/{{new_user_id}}",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"users",
								"{{new_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user without role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"new_user_id\", jsonData.id);\r",
									"\r",
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response json should contain new user\", function () {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData).to.have.property('createdDate');\r",
									"    pm.expect(jsonData).to.have.property('active');\r",
									"    pm.expect(jsonData).to.have.property('authorities');\r",
									"});\r",
									"\r",
									"pm.test(\"test values\", function () {\r",
									"        pm.expect(jsonData.id,\"id\").greaterThan(0);\r",
									"        pm.expect(jsonData.username,\"username\").eql('calimero');\r",
									"        pm.expect(jsonData.createdDate,\"createdDate\").not.eql(null);\r",
									"        pm.expect(jsonData.active,\"active\").eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"test roles\", function () {\r",
									"    //nb roles\r",
									"    pm.expect(Object.keys(jsonData.authorities).length,\"no authority\").to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"calimero\",\n    \"email\": \"calimero@jukebox.com\",\n    \"password\": \"c@l1mero\",\n    \"authorities\": []\n}"
						},
						"url": {
							"raw": "{{admin_url}}/users",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_url}}/users/{{new_user_id}}",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"users",
								"{{new_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "reset all tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_url}}/users/tokens",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"users",
								"tokens"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "artist",
			"item": [
				{
					"name": "all artists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/artists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "get artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response json should contain one collection\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"    pm.expect(pm.response.json()).to.have.property('name');\r",
									"    pm.expect(pm.response.json()).to.have.property('bio');\r",
									"    pm.expect(pm.response.json()).to.have.property('fanNumber');\r",
									"});\r",
									"\r",
									"pm.test(\"test id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).greaterThan(0);\r",
									"});\r",
									"\r",
									"if (pm.environment.get(\"artist_id\") == 1)\r",
									"    pm.test(\"test values\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.id).eql(1);\r",
									"        pm.expect(jsonData.name).eql('Celtic woman');\r",
									"        pm.expect(jsonData.bio).not.eql(null);\r",
									"        pm.expect(jsonData.fanNumber).eql(31760);\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/artists/{{artist_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"artists",
								"{{artist_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get artist albums",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/artists/{{artist_id}}/albums",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"artists",
								"{{artist_id}}",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "search artists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/artists?search=tic",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"artists"
							],
							"query": [
								{
									"key": "search",
									"value": "tic"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// maj du nouvel artist dans l'environnement",
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"new_artist_id\", jsonData.id);",
									"",
									"// tests ",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json should contain one collection\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('id');",
									"    pm.expect(pm.response.json()).to.have.property('name');",
									"    pm.expect(pm.response.json()).to.have.property('bio');",
									"    pm.expect(pm.response.json()).to.have.property('fanNumber');",
									"});",
									"",
									"pm.test(\"test id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).greaterThan(0);",
									"});",
									"",
									"pm.test(\"test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).eql('AC/DC');",
									"});",
									"",
									"pm.test(\"test bio\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.bio).not.eql(null);",
									"});",
									"",
									"pm.test(\"test fan number\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fanNumber).eql(7252046);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 0,\n    \"name\": \"AC/DC\",\n    \"bio\": \"La famille Young quitte Glasgow en Ecosse et émigre à Sydney en Australie en 1963. Le fils cadet de sept frères George, guitariste et auteur compositeur y fonde The Easybeats avec le Hollandais Harry Vanda....\",\n    \"fanNumber\": 7252046\n}"
						},
						"url": {
							"raw": "{{base_url}}/artists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json should contain one collection\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('id');",
									"    pm.expect(pm.response.json()).to.have.property('name');",
									"    pm.expect(pm.response.json()).to.have.property('bio');",
									"    pm.expect(pm.response.json()).to.have.property('fanNumber');",
									"});",
									"",
									"pm.test(\"test values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).eql('AC/DC');",
									"    pm.expect(jsonData.bio).not.eql(null);",
									"    pm.expect(jsonData.fanNumber).eql(7252050);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{new_artist_id}},\n    \"name\": \"AC/DC\",\n    \"bio\": \"La famille Young quitte Glasgow en Ecosse et émigre à Sydney en Australie en 1963. Le fils cadet de sept frères George, guitariste et auteur compositeur y fonde The Easybeats avec le Hollandais Harry Vanda....\",\n    \"fanNumber\": 7252050\n}"
						},
						"url": {
							"raw": "{{base_url}}/artists/{{new_artist_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"artists",
								"{{new_artist_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/artists/{{new_artist_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"artists",
								"{{new_artist_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "album",
			"item": [
				{
					"name": "all albums",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/albums",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "get album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response json should contain one collection\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"    pm.expect(pm.response.json()).to.have.property('title');\r",
									"    pm.expect(pm.response.json()).to.have.property('releaseDate');\r",
									"    pm.expect(pm.response.json()).to.have.property('artist');\r",
									"    pm.expect(pm.response.json()).to.have.property('tracks');\r",
									"});\r",
									"\r",
									"pm.test(\"test id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).greaterThan(0);\r",
									"});\r",
									"\r",
									"if (pm.environment.get(\"album_id\") == 2) {\r",
									"    pm.test(\"test values\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.id).eql(2);\r",
									"        pm.expect(jsonData.title).eql('Le Meilleur de la Musique Irlandaise - Les Plus Beaux Airs Celtiques');\r",
									"    });\r",
									"\r",
									"    pm.test(\"test values\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.tracks.length).eql(3);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/albums/{{album_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"albums",
								"{{album_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search albums",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/albums?search=LA",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"albums"
							],
							"query": [
								{
									"key": "search",
									"value": "LA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// maj du nouvel album dans l'environnement",
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"new_album_id\", jsonData.id);",
									"",
									"// tests ",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json should contain one collection\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('id');",
									"    pm.expect(pm.response.json()).to.have.property('title');",
									"    pm.expect(pm.response.json()).to.have.property('releaseDate');",
									"    pm.expect(pm.response.json()).to.have.property('artist');",
									"    pm.expect(pm.response.json()).to.have.property('tracks');",
									"});",
									"",
									"pm.test(\"test id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).greaterThan(0);",
									"});",
									"",
									"pm.test(\"test values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).eql('PYRAMIDE (Version deluxe)');",
									"    pm.expect(jsonData.releaseDate).eql('2019-11-08');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 0,\n    \"title\": \"PYRAMIDE (Version deluxe)\",\n    \"releaseDate\": \"2019-11-08\",\n    \"artist\": {\n        \"id\": 2\n    },\n    \"tracks\": [\n        {\n            \"id\": 0,\n            \"title\": \"Pyramide\",\n            \"duration\": 175,\n            \"preview\": \"https://cdns-preview-a.dzcdn.net/stream/c-a42bafb687f3c4b4cb6cfc96e620887d-7.mp3\"\n        },\n        {\n            \"id\": 0,\n            \"title\": \"Les planètes\",\n            \"duration\": 232,\n            \"preview\": \"https://cdns-preview-6.dzcdn.net/stream/c-6d86ef7c721648224a10cf5f20ec37e3-6.mp3\"\n        },\n        {\n            \"id\": 0,\n            \"title\": \"Ouh na na\",\n            \"duration\": 182,\n            \"preview\": \"https://cdns-preview-c.dzcdn.net/stream/c-caa0bd02fd2f4f9221ebaff32e67cfe1-6.mp3\"\n        },\n        {\n            \"id\": 0,\n            \"title\": \"Seul\",\n            \"duration\": 175,\n            \"preview\": \"https://cdns-preview-0.dzcdn.net/stream/c-0c201c858167dae678c4330641127244-6.mp3\"\n        }\n    ]\n}\n"
						},
						"url": {
							"raw": "{{base_url}}/albums",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 4,\n    \"title\": \"PYRAMIDE (Version deluxe)\",\n    \"releasedate\": \"2020-11-03\",\n    \"artist\": {\n        \"id\": 2\n    },\n    \"tracks\": [\n        {\n            \"id\": 25,\n            \"title\": \"Pyramide\",\n            \"duration\": 175,\n            \"preview\": \"https://cdns-preview-a.dzcdn.net/stream/c-a42bafb687f3c4b4cb6cfc96e620887d-7.mp3\"\n        },\n        {\n            \"id\": 27,\n            \"title\": \"Ouh na na\",\n            \"duration\": 182,\n            \"preview\": \"https://cdns-preview-c.dzcdn.net/stream/c-caa0bd02fd2f4f9221ebaff32e67cfe1-6.mp3\"\n        },\n        {\n            \"id\": 28,\n            \"title\": \"Seul\",\n            \"duration\": 175,\n            \"preview\": \"https://cdns-preview-0.dzcdn.net/stream/c-0c201c858167dae678c4330641127244-6.mp3\"\n        },\n        {\n            \"id\": 0,\n            \"title\": \"La regarder s'en aller\",\n            \"duration\": 206,\n            \"preview\": \"https://cdns-preview-5.dzcdn.net/stream/c-5da53889aa1ff263f7df5b9a2504c2b8-7.mp3\"\n        }\n    ]\n}\n"
						},
						"url": {
							"raw": "{{base_url}}/albums/{{new_album_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"albums",
								"{{new_album_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/albums/{{new_album_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"albums",
								"{{new_album_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "track",
			"item": [
				{
					"name": "all tracks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tracks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "get track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response json should contain one collection\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"    pm.expect(pm.response.json()).to.have.property('title');\r",
									"    pm.expect(pm.response.json()).to.have.property('duration');\r",
									"    pm.expect(pm.response.json()).to.have.property('preview');\r",
									"});\r",
									"\r",
									"pm.test(\"test id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).greaterThan(0);\r",
									"});\r",
									"\r",
									"if (pm.environment.get(\"track_id\") == 3)\r",
									"    pm.test(\"test values\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.id).eql(3);\r",
									"        pm.expect(jsonData.title).eql('Mon univers');\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tracks/{{track_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tracks",
								"{{track_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search tracks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tracks?search=l",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tracks"
							],
							"query": [
								{
									"key": "search",
									"value": "l"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// maj du nouveau track dans l'environnement",
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"new_track_id\", jsonData.id);",
									"",
									"// tests ",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json should contain one collection\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('id');",
									"    pm.expect(pm.response.json()).to.have.property('title');",
									"    pm.expect(pm.response.json()).to.have.property('duration');",
									"    pm.expect(pm.response.json()).to.have.property('preview');",
									"});",
									"",
									"pm.test(\"test id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).greaterThan(0);",
									"});",
									"",
									"pm.test(\"test values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).eql('Follow Me');",
									"    pm.expect(jsonData.duration).eql(218);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 0,\n    \"title\": \"Follow Me\",\n    \"duration\": 218,\n    \"preview\": \"https://cdns-preview-2.dzcdn.net/stream/c-25361eb4c1bbe04d9d4aee18722b6b55-6.mp3\",\n    \"album\": {\n        \"id\": 3\n    }\n}\n"
						},
						"url": {
							"raw": "{{base_url}}/tracks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"title\": \"Color gitano\",\n    \"duration\": 220,\n    \"preview\": \"https://cdns-preview-f.dzcdn.net/stream/c-f981754c689d1819ed89bacbf4d53f75-3.mp3\",\n    \"album\": {\n        \"id\": 3\n    }\n}\n"
						},
						"url": {
							"raw": "{{base_url}}/tracks/{{new_track_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tracks",
								"{{new_track_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/tracks/{{new_track_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tracks",
								"{{new_track_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "playlist",
			"item": [
				{
					"name": "all playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/playlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "get playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response json should contain one collection\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"    pm.expect(pm.response.json()).to.have.property('name');\r",
									"    pm.expect(pm.response.json()).to.have.property('tracks');\r",
									"});\r",
									"\r",
									"pm.test(\"test id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).greaterThan(0);\r",
									"});\r",
									"\r",
									"if (pm.environment.get(\"playlist_id\") == 1) {\r",
									"    pm.test(\"test values\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.id).eql(1);\r",
									"        pm.expect(jsonData.name).eql('celtic');\r",
									"        pm.expect(jsonData.tracks.length).eql(3);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/playlists/{{playlist_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"playlists",
								"{{playlist_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search playlists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/playlists?search=tic",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"playlists"
							],
							"query": [
								{
									"key": "search",
									"value": "tic"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// maj de la nouvelle playlist dans l'environnement",
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"new_playlist_id\", jsonData.id);",
									"",
									"// tests ",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json should contain one collection\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('id');",
									"    pm.expect(pm.response.json()).to.have.property('name');",
									"    pm.expect(pm.response.json()).to.have.property('tracks');",
									"});",
									"",
									"pm.test(\"test id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).greaterThan(0);",
									"});",
									"",
									"pm.test(\"test values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).eql('travail');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 0,\n    \"name\": \"travail\",\n    \"tracks\": [\n            {\n                \"id\": 20\n            },\n            {\n                \"id\": 14\n            },\n            {\n                \"id\": 3\n            },\n            {\n                \"id\": 23\n            }\n    ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/playlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 3,\n    \"name\": \"travail à la maison\",\n    \"tracks\": [\n            {\n                \"id\": 20\n            },\n            {\n                \"id\": 3\n            },\n            {\n                \"id\": 23\n            }\n    ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/playlists/{{new_playlist_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"playlists",
								"{{new_playlist_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{xsrf-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/playlists/{{new_playlist_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"playlists",
								"{{new_playlist_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "home",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{localhost}}/",
					"host": [
						"{{localhost}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}